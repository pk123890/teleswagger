=begin
#Telegram bot API

#This is a swagger defenition for [Telegram bot API](https://core.telegram.org/bots/api). 

OpenAPI spec version: 3.3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require "uri"

module Teleswagger
  class ChatsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # 
    # 
    # @param token bot&#39;s token to authorize the request
    # @param chat_id 
    # @param [Hash] opts the optional parameters
    # @return [ResponseBool]
    def delete_chat_photo(token, chat_id, opts = {})
      data, _status_code, _headers = delete_chat_photo_with_http_info(token, chat_id, opts)
      return data
    end

    # 
    # 
    # @param token bot&#39;s token to authorize the request
    # @param chat_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponseBool, Fixnum, Hash)>] ResponseBool data, response status code and response headers
    def delete_chat_photo_with_http_info(token, chat_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ChatsApi.delete_chat_photo ..."
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling ChatsApi.delete_chat_photo"
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling ChatsApi.delete_chat_photo"
      end
      # resource path
      local_var_path = "/bot{token}/deleteChatPhoto".sub('{' + 'token' + '}', token.to_s)

      # query parameters
      query_params = {}
      query_params[:'chat_id'] = chat_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseBool')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChatsApi#delete_chat_photo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param token bot&#39;s token to authorize the request
    # @param chat_id 
    # @param [Hash] opts the optional parameters
    # @return [String]
    def export_chat_invite_link(token, chat_id, opts = {})
      data, _status_code, _headers = export_chat_invite_link_with_http_info(token, chat_id, opts)
      return data
    end

    # 
    # 
    # @param token bot&#39;s token to authorize the request
    # @param chat_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def export_chat_invite_link_with_http_info(token, chat_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ChatsApi.export_chat_invite_link ..."
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling ChatsApi.export_chat_invite_link"
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling ChatsApi.export_chat_invite_link"
      end
      # resource path
      local_var_path = "/bot{token}/exportChatInviteLink".sub('{' + 'token' + '}', token.to_s)

      # query parameters
      query_params = {}
      query_params[:'chat_id'] = chat_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChatsApi#export_chat_invite_link\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param token bot&#39;s token to authorize the request
    # @param chat_id 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2003]
    def get_chat(token, chat_id, opts = {})
      data, _status_code, _headers = get_chat_with_http_info(token, chat_id, opts)
      return data
    end

    # 
    # 
    # @param token bot&#39;s token to authorize the request
    # @param chat_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2003, Fixnum, Hash)>] InlineResponse2003 data, response status code and response headers
    def get_chat_with_http_info(token, chat_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ChatsApi.get_chat ..."
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling ChatsApi.get_chat"
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling ChatsApi.get_chat"
      end
      # resource path
      local_var_path = "/bot{token}/getChat".sub('{' + 'token' + '}', token.to_s)

      # query parameters
      query_params = {}
      query_params[:'chat_id'] = chat_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2003')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChatsApi#get_chat\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param token bot&#39;s token to authorize the request
    # @param chat_id 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2004]
    def get_chat_administrators(token, chat_id, opts = {})
      data, _status_code, _headers = get_chat_administrators_with_http_info(token, chat_id, opts)
      return data
    end

    # 
    # 
    # @param token bot&#39;s token to authorize the request
    # @param chat_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2004, Fixnum, Hash)>] InlineResponse2004 data, response status code and response headers
    def get_chat_administrators_with_http_info(token, chat_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ChatsApi.get_chat_administrators ..."
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling ChatsApi.get_chat_administrators"
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling ChatsApi.get_chat_administrators"
      end
      # resource path
      local_var_path = "/bot{token}/getChatAdministrators".sub('{' + 'token' + '}', token.to_s)

      # query parameters
      query_params = {}
      query_params[:'chat_id'] = chat_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2004')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChatsApi#get_chat_administrators\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param token bot&#39;s token to authorize the request
    # @param chat_id 
    # @param user_id 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2006]
    def get_chat_member(token, chat_id, user_id, opts = {})
      data, _status_code, _headers = get_chat_member_with_http_info(token, chat_id, user_id, opts)
      return data
    end

    # 
    # 
    # @param token bot&#39;s token to authorize the request
    # @param chat_id 
    # @param user_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2006, Fixnum, Hash)>] InlineResponse2006 data, response status code and response headers
    def get_chat_member_with_http_info(token, chat_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ChatsApi.get_chat_member ..."
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling ChatsApi.get_chat_member"
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling ChatsApi.get_chat_member"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling ChatsApi.get_chat_member"
      end
      # resource path
      local_var_path = "/bot{token}/getChatMember".sub('{' + 'token' + '}', token.to_s)

      # query parameters
      query_params = {}
      query_params[:'chat_id'] = chat_id
      query_params[:'user_id'] = user_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2006')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChatsApi#get_chat_member\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param token bot&#39;s token to authorize the request
    # @param chat_id 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2005]
    def get_chat_members_count(token, chat_id, opts = {})
      data, _status_code, _headers = get_chat_members_count_with_http_info(token, chat_id, opts)
      return data
    end

    # 
    # 
    # @param token bot&#39;s token to authorize the request
    # @param chat_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2005, Fixnum, Hash)>] InlineResponse2005 data, response status code and response headers
    def get_chat_members_count_with_http_info(token, chat_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ChatsApi.get_chat_members_count ..."
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling ChatsApi.get_chat_members_count"
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling ChatsApi.get_chat_members_count"
      end
      # resource path
      local_var_path = "/bot{token}/getChatMembersCount".sub('{' + 'token' + '}', token.to_s)

      # query parameters
      query_params = {}
      query_params[:'chat_id'] = chat_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2005')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChatsApi#get_chat_members_count\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param token bot&#39;s token to authorize the request
    # @param chat_id 
    # @param user_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :until_date 
    # @return [ResponseBool]
    def kick_chat_member(token, chat_id, user_id, opts = {})
      data, _status_code, _headers = kick_chat_member_with_http_info(token, chat_id, user_id, opts)
      return data
    end

    # 
    # 
    # @param token bot&#39;s token to authorize the request
    # @param chat_id 
    # @param user_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :until_date 
    # @return [Array<(ResponseBool, Fixnum, Hash)>] ResponseBool data, response status code and response headers
    def kick_chat_member_with_http_info(token, chat_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ChatsApi.kick_chat_member ..."
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling ChatsApi.kick_chat_member"
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling ChatsApi.kick_chat_member"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling ChatsApi.kick_chat_member"
      end
      # resource path
      local_var_path = "/bot{token}/kickChatMember".sub('{' + 'token' + '}', token.to_s)

      # query parameters
      query_params = {}
      query_params[:'chat_id'] = chat_id
      query_params[:'user_id'] = user_id
      query_params[:'until_date'] = opts[:'until_date'] if !opts[:'until_date'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseBool')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChatsApi#kick_chat_member\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param token bot&#39;s token to authorize the request
    # @param chat_id 
    # @param [Hash] opts the optional parameters
    # @return [ResponseBool]
    def leave_chat(token, chat_id, opts = {})
      data, _status_code, _headers = leave_chat_with_http_info(token, chat_id, opts)
      return data
    end

    # 
    # 
    # @param token bot&#39;s token to authorize the request
    # @param chat_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponseBool, Fixnum, Hash)>] ResponseBool data, response status code and response headers
    def leave_chat_with_http_info(token, chat_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ChatsApi.leave_chat ..."
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling ChatsApi.leave_chat"
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling ChatsApi.leave_chat"
      end
      # resource path
      local_var_path = "/bot{token}/leaveChat".sub('{' + 'token' + '}', token.to_s)

      # query parameters
      query_params = {}
      query_params[:'chat_id'] = chat_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseBool')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChatsApi#leave_chat\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param token bot&#39;s token to authorize the request
    # @param chat_id 
    # @param message_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :disable_notification 
    # @return [ResponseBool]
    def pin_chat_message(token, chat_id, message_id, opts = {})
      data, _status_code, _headers = pin_chat_message_with_http_info(token, chat_id, message_id, opts)
      return data
    end

    # 
    # 
    # @param token bot&#39;s token to authorize the request
    # @param chat_id 
    # @param message_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :disable_notification 
    # @return [Array<(ResponseBool, Fixnum, Hash)>] ResponseBool data, response status code and response headers
    def pin_chat_message_with_http_info(token, chat_id, message_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ChatsApi.pin_chat_message ..."
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling ChatsApi.pin_chat_message"
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling ChatsApi.pin_chat_message"
      end
      # verify the required parameter 'message_id' is set
      if @api_client.config.client_side_validation && message_id.nil?
        fail ArgumentError, "Missing the required parameter 'message_id' when calling ChatsApi.pin_chat_message"
      end
      # resource path
      local_var_path = "/bot{token}/pinChatMessage".sub('{' + 'token' + '}', token.to_s)

      # query parameters
      query_params = {}
      query_params[:'chat_id'] = chat_id
      query_params[:'message_id'] = message_id
      query_params[:'disable_notification'] = opts[:'disable_notification'] if !opts[:'disable_notification'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseBool')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChatsApi#pin_chat_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param token bot&#39;s token to authorize the request
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [ResponseBool]
    def promote_chat_member(token, body, opts = {})
      data, _status_code, _headers = promote_chat_member_with_http_info(token, body, opts)
      return data
    end

    # 
    # 
    # @param token bot&#39;s token to authorize the request
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponseBool, Fixnum, Hash)>] ResponseBool data, response status code and response headers
    def promote_chat_member_with_http_info(token, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ChatsApi.promote_chat_member ..."
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling ChatsApi.promote_chat_member"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ChatsApi.promote_chat_member"
      end
      # resource path
      local_var_path = "/bot{token}/promoteChatMember".sub('{' + 'token' + '}', token.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseBool')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChatsApi#promote_chat_member\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param token bot&#39;s token to authorize the request
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [ResponseBool]
    def restrict_chat_member(token, body, opts = {})
      data, _status_code, _headers = restrict_chat_member_with_http_info(token, body, opts)
      return data
    end

    # 
    # 
    # @param token bot&#39;s token to authorize the request
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponseBool, Fixnum, Hash)>] ResponseBool data, response status code and response headers
    def restrict_chat_member_with_http_info(token, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ChatsApi.restrict_chat_member ..."
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling ChatsApi.restrict_chat_member"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ChatsApi.restrict_chat_member"
      end
      # resource path
      local_var_path = "/bot{token}/restrictChatMember".sub('{' + 'token' + '}', token.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseBool')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChatsApi#restrict_chat_member\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param token bot&#39;s token to authorize the request
    # @param chat_id 
    # @param action 
    # @param [Hash] opts the optional parameters
    # @return [ResponseBool]
    def send_chat_action(token, chat_id, action, opts = {})
      data, _status_code, _headers = send_chat_action_with_http_info(token, chat_id, action, opts)
      return data
    end

    # 
    # 
    # @param token bot&#39;s token to authorize the request
    # @param chat_id 
    # @param action 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponseBool, Fixnum, Hash)>] ResponseBool data, response status code and response headers
    def send_chat_action_with_http_info(token, chat_id, action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ChatsApi.send_chat_action ..."
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling ChatsApi.send_chat_action"
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling ChatsApi.send_chat_action"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling ChatsApi.send_chat_action"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['typing', 'upload_photo', 'record_video', 'upload_video', 'record_audio', 'upload_audio', 'upload_document', 'find_location', 'record_video_note', 'upload_video_note'].include?(action)
        fail ArgumentError, "invalid value for 'action', must be one of typing, upload_photo, record_video, upload_video, record_audio, upload_audio, upload_document, find_location, record_video_note, upload_video_note"
      end
      # resource path
      local_var_path = "/bot{token}/sendChatAction".sub('{' + 'token' + '}', token.to_s)

      # query parameters
      query_params = {}
      query_params[:'chat_id'] = chat_id
      query_params[:'action'] = action

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseBool')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChatsApi#send_chat_action\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param token bot&#39;s token to authorize the request
    # @param chat_id 
    # @param description 
    # @param [Hash] opts the optional parameters
    # @return [ResponseBool]
    def set_chat_description(token, chat_id, description, opts = {})
      data, _status_code, _headers = set_chat_description_with_http_info(token, chat_id, description, opts)
      return data
    end

    # 
    # 
    # @param token bot&#39;s token to authorize the request
    # @param chat_id 
    # @param description 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponseBool, Fixnum, Hash)>] ResponseBool data, response status code and response headers
    def set_chat_description_with_http_info(token, chat_id, description, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ChatsApi.set_chat_description ..."
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling ChatsApi.set_chat_description"
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling ChatsApi.set_chat_description"
      end
      # verify the required parameter 'description' is set
      if @api_client.config.client_side_validation && description.nil?
        fail ArgumentError, "Missing the required parameter 'description' when calling ChatsApi.set_chat_description"
      end
      # resource path
      local_var_path = "/bot{token}/setChatDescription".sub('{' + 'token' + '}', token.to_s)

      # query parameters
      query_params = {}
      query_params[:'chat_id'] = chat_id
      query_params[:'description'] = description

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseBool')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChatsApi#set_chat_description\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param token bot&#39;s token to authorize the request
    # @param chat_id 
    # @param photo 
    # @param [Hash] opts the optional parameters
    # @return [ResponseBool]
    def set_chat_photo(token, chat_id, photo, opts = {})
      data, _status_code, _headers = set_chat_photo_with_http_info(token, chat_id, photo, opts)
      return data
    end

    # 
    # 
    # @param token bot&#39;s token to authorize the request
    # @param chat_id 
    # @param photo 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponseBool, Fixnum, Hash)>] ResponseBool data, response status code and response headers
    def set_chat_photo_with_http_info(token, chat_id, photo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ChatsApi.set_chat_photo ..."
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling ChatsApi.set_chat_photo"
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling ChatsApi.set_chat_photo"
      end
      # verify the required parameter 'photo' is set
      if @api_client.config.client_side_validation && photo.nil?
        fail ArgumentError, "Missing the required parameter 'photo' when calling ChatsApi.set_chat_photo"
      end
      # resource path
      local_var_path = "/bot{token}/setChatPhoto".sub('{' + 'token' + '}', token.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params["chat_id"] = chat_id
      form_params["photo"] = photo

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseBool')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChatsApi#set_chat_photo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param token bot&#39;s token to authorize the request
    # @param chat_id 
    # @param title 
    # @param [Hash] opts the optional parameters
    # @return [ResponseBool]
    def set_chat_title(token, chat_id, title, opts = {})
      data, _status_code, _headers = set_chat_title_with_http_info(token, chat_id, title, opts)
      return data
    end

    # 
    # 
    # @param token bot&#39;s token to authorize the request
    # @param chat_id 
    # @param title 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponseBool, Fixnum, Hash)>] ResponseBool data, response status code and response headers
    def set_chat_title_with_http_info(token, chat_id, title, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ChatsApi.set_chat_title ..."
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling ChatsApi.set_chat_title"
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling ChatsApi.set_chat_title"
      end
      # verify the required parameter 'title' is set
      if @api_client.config.client_side_validation && title.nil?
        fail ArgumentError, "Missing the required parameter 'title' when calling ChatsApi.set_chat_title"
      end
      # resource path
      local_var_path = "/bot{token}/setChatTitle".sub('{' + 'token' + '}', token.to_s)

      # query parameters
      query_params = {}
      query_params[:'chat_id'] = chat_id
      query_params[:'title'] = title

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseBool')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChatsApi#set_chat_title\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param token bot&#39;s token to authorize the request
    # @param chat_id 
    # @param user_id 
    # @param [Hash] opts the optional parameters
    # @return [ResponseBool]
    def unban_chat_member(token, chat_id, user_id, opts = {})
      data, _status_code, _headers = unban_chat_member_with_http_info(token, chat_id, user_id, opts)
      return data
    end

    # 
    # 
    # @param token bot&#39;s token to authorize the request
    # @param chat_id 
    # @param user_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponseBool, Fixnum, Hash)>] ResponseBool data, response status code and response headers
    def unban_chat_member_with_http_info(token, chat_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ChatsApi.unban_chat_member ..."
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling ChatsApi.unban_chat_member"
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling ChatsApi.unban_chat_member"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling ChatsApi.unban_chat_member"
      end
      # resource path
      local_var_path = "/bot{token}/unbanChatMember".sub('{' + 'token' + '}', token.to_s)

      # query parameters
      query_params = {}
      query_params[:'chat_id'] = chat_id
      query_params[:'user_id'] = user_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseBool')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChatsApi#unban_chat_member\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param token bot&#39;s token to authorize the request
    # @param chat_id 
    # @param [Hash] opts the optional parameters
    # @return [ResponseBool]
    def unpin_chat_message(token, chat_id, opts = {})
      data, _status_code, _headers = unpin_chat_message_with_http_info(token, chat_id, opts)
      return data
    end

    # 
    # 
    # @param token bot&#39;s token to authorize the request
    # @param chat_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponseBool, Fixnum, Hash)>] ResponseBool data, response status code and response headers
    def unpin_chat_message_with_http_info(token, chat_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ChatsApi.unpin_chat_message ..."
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling ChatsApi.unpin_chat_message"
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling ChatsApi.unpin_chat_message"
      end
      # resource path
      local_var_path = "/bot{token}/unpinChatMessage".sub('{' + 'token' + '}', token.to_s)

      # query parameters
      query_params = {}
      query_params[:'chat_id'] = chat_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseBool')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChatsApi#unpin_chat_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
