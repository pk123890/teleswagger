=begin
#Telegram bot API

#This is a swagger defenition for [Telegram bot API](https://core.telegram.org/bots/api). 

OpenAPI spec version: 3.6

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module Teleswagger
  class UpdatesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @return [ResponseBool]
    def delete_webhook(opts = {})
      data, _status_code, _headers = delete_webhook_with_http_info(opts)
      return data
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponseBool, Fixnum, Hash)>] ResponseBool data, response status code and response headers
    def delete_webhook_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UpdatesApi.delete_webhook ..."
      end
      # resource path
      local_var_path = "/bot{token}/deleteWebhook".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseBool')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UpdatesApi#delete_webhook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param token bot&#39;s token to authorize the request
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset 
    # @option opts [GetUpdatesBody] :body 
    # @return [ResponseUpdate]
    def get_updates(token, opts = {})
      data, _status_code, _headers = get_updates_with_http_info(token, opts)
      return data
    end

    # 
    # 
    # @param token bot&#39;s token to authorize the request
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset 
    # @option opts [GetUpdatesBody] :body 
    # @return [Array<(ResponseUpdate, Fixnum, Hash)>] ResponseUpdate data, response status code and response headers
    def get_updates_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UpdatesApi.get_updates ..."
      end
      # verify the required parameter 'token' is set
      fail ArgumentError, "Missing the required parameter 'token' when calling UpdatesApi.get_updates" if token.nil?
      # resource path
      local_var_path = "/bot{token}/getUpdates".sub('{format}','json').sub('{' + 'token' + '}', token.to_s)

      # query parameters
      query_params = {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseUpdate')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UpdatesApi#get_updates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @return [WebhookInfo]
    def get_webhook_info(opts = {})
      data, _status_code, _headers = get_webhook_info_with_http_info(opts)
      return data
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(WebhookInfo, Fixnum, Hash)>] WebhookInfo data, response status code and response headers
    def get_webhook_info_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UpdatesApi.get_webhook_info ..."
      end
      # resource path
      local_var_path = "/bot{token}/getWebhookInfo".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WebhookInfo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UpdatesApi#get_webhook_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param token bot&#39;s token to authorize the request
    # @param url 
    # @param [Hash] opts the optional parameters
    # @option opts [File] :certificate 
    # @option opts [Integer] :max_connections 
    # @option opts [Array<String>] :allowed_updates 
    # @return [ResponseBool]
    def set_webhook(token, url, opts = {})
      data, _status_code, _headers = set_webhook_with_http_info(token, url, opts)
      return data
    end

    # 
    # 
    # @param token bot&#39;s token to authorize the request
    # @param url 
    # @param [Hash] opts the optional parameters
    # @option opts [File] :certificate 
    # @option opts [Integer] :max_connections 
    # @option opts [Array<String>] :allowed_updates 
    # @return [Array<(ResponseBool, Fixnum, Hash)>] ResponseBool data, response status code and response headers
    def set_webhook_with_http_info(token, url, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UpdatesApi.set_webhook ..."
      end
      # verify the required parameter 'token' is set
      fail ArgumentError, "Missing the required parameter 'token' when calling UpdatesApi.set_webhook" if token.nil?
      # verify the required parameter 'url' is set
      fail ArgumentError, "Missing the required parameter 'url' when calling UpdatesApi.set_webhook" if url.nil?
      if opts[:'allowed_updates'] && !['message', 'edited_message', 'channel_post', 'edited_channel_post', 'inline_query', 'chosen_inline_result', 'callback_query', 'shipping_query', 'pre_checkout_query'].include?(opts[:'allowed_updates'])
        fail ArgumentError, 'invalid value for "allowed_updates", must be one of message, edited_message, channel_post, edited_channel_post, inline_query, chosen_inline_result, callback_query, shipping_query, pre_checkout_query'
      end
      # resource path
      local_var_path = "/bot{token}/setWebhook".sub('{format}','json').sub('{' + 'token' + '}', token.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['multipart/form-data']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}
      form_params["url"] = url
      form_params["certificate"] = opts[:'certificate'] if !opts[:'certificate'].nil?
      form_params["max_connections"] = opts[:'max_connections'] if !opts[:'max_connections'].nil?
      form_params["allowed_updates"] = @api_client.build_collection_param(opts[:'allowed_updates'], :multi) if !opts[:'allowed_updates'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseBool')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UpdatesApi#set_webhook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
