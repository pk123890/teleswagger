=begin
#Telegram bot API

#This is a swagger defenition for [Telegram bot API](https://core.telegram.org/bots/api). 

OpenAPI spec version: 3.3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require "uri"

module Teleswagger
  class PaymentsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # 
    # 
    # @param token bot&#39;s token to authorize the request
    # @param pre_checkout_query_id 
    # @param ok 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :error_message 
    # @return [ResponseBool]
    def answer_pre_checkout_query(token, pre_checkout_query_id, ok, opts = {})
      data, _status_code, _headers = answer_pre_checkout_query_with_http_info(token, pre_checkout_query_id, ok, opts)
      return data
    end

    # 
    # 
    # @param token bot&#39;s token to authorize the request
    # @param pre_checkout_query_id 
    # @param ok 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :error_message 
    # @return [Array<(ResponseBool, Fixnum, Hash)>] ResponseBool data, response status code and response headers
    def answer_pre_checkout_query_with_http_info(token, pre_checkout_query_id, ok, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PaymentsApi.answer_pre_checkout_query ..."
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling PaymentsApi.answer_pre_checkout_query"
      end
      # verify the required parameter 'pre_checkout_query_id' is set
      if @api_client.config.client_side_validation && pre_checkout_query_id.nil?
        fail ArgumentError, "Missing the required parameter 'pre_checkout_query_id' when calling PaymentsApi.answer_pre_checkout_query"
      end
      # verify the required parameter 'ok' is set
      if @api_client.config.client_side_validation && ok.nil?
        fail ArgumentError, "Missing the required parameter 'ok' when calling PaymentsApi.answer_pre_checkout_query"
      end
      # resource path
      local_var_path = "/bot{token}/answerPreCheckoutQuery".sub('{' + 'token' + '}', token.to_s)

      # query parameters
      query_params = {}
      query_params[:'pre_checkout_query_id'] = pre_checkout_query_id
      query_params[:'ok'] = ok
      query_params[:'error_message'] = opts[:'error_message'] if !opts[:'error_message'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseBool')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentsApi#answer_pre_checkout_query\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param token bot&#39;s token to authorize the request
    # @param [Hash] opts the optional parameters
    # @option opts [AnswerShippingQueryBody] :body 
    # @return [ResponseMessage]
    def answer_shipping_query(token, opts = {})
      data, _status_code, _headers = answer_shipping_query_with_http_info(token, opts)
      return data
    end

    # 
    # 
    # @param token bot&#39;s token to authorize the request
    # @param [Hash] opts the optional parameters
    # @option opts [AnswerShippingQueryBody] :body 
    # @return [Array<(ResponseMessage, Fixnum, Hash)>] ResponseMessage data, response status code and response headers
    def answer_shipping_query_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PaymentsApi.answer_shipping_query ..."
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling PaymentsApi.answer_shipping_query"
      end
      # resource path
      local_var_path = "/bot{token}/answerShippingQuery".sub('{' + 'token' + '}', token.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseMessage')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentsApi#answer_shipping_query\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param token bot&#39;s token to authorize the request
    # @param [Hash] opts the optional parameters
    # @option opts [SendInvoiceBody] :body 
    # @return [ResponseMessage]
    def send_invoice(token, opts = {})
      data, _status_code, _headers = send_invoice_with_http_info(token, opts)
      return data
    end

    # 
    # 
    # @param token bot&#39;s token to authorize the request
    # @param [Hash] opts the optional parameters
    # @option opts [SendInvoiceBody] :body 
    # @return [Array<(ResponseMessage, Fixnum, Hash)>] ResponseMessage data, response status code and response headers
    def send_invoice_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PaymentsApi.send_invoice ..."
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling PaymentsApi.send_invoice"
      end
      # resource path
      local_var_path = "/bot{token}/sendInvoice".sub('{' + 'token' + '}', token.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseMessage')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentsApi#send_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
