=begin
#Telegram bot API

#This is a swagger defenition for [Telegram bot API](https://core.telegram.org/bots/api). 

OpenAPI spec version: 3.3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require "uri"

module Teleswagger
  class UpdatesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @return [ResponseBool]
    def delete_webhook(opts = {})
      data, _status_code, _headers = delete_webhook_with_http_info(opts)
      return data
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponseBool, Fixnum, Hash)>] ResponseBool data, response status code and response headers
    def delete_webhook_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UpdatesApi.delete_webhook ..."
      end
      # resource path
      local_var_path = "/bot{token}/deleteWebhook"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseBool')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UpdatesApi#delete_webhook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param token bot&#39;s token to authorize the request
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset 
    # @option opts [Integer] :limit 
    # @option opts [Integer] :timeout 
    # @option opts [Array<String>] :allowed_updates 
    # @return [ResponseUpdate]
    def get_updates(token, opts = {})
      data, _status_code, _headers = get_updates_with_http_info(token, opts)
      return data
    end

    # 
    # 
    # @param token bot&#39;s token to authorize the request
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset 
    # @option opts [Integer] :limit 
    # @option opts [Integer] :timeout 
    # @option opts [Array<String>] :allowed_updates 
    # @return [Array<(ResponseUpdate, Fixnum, Hash)>] ResponseUpdate data, response status code and response headers
    def get_updates_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UpdatesApi.get_updates ..."
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling UpdatesApi.get_updates"
      end
      if @api_client.config.client_side_validation && opts[:'allowed_updates'] && !opts[:'allowed_updates'].all?{|item| ['message', 'edited_message', 'channel_post', 'edited_channel_post', 'inline_query', 'chosen_inline_result', 'callback_query'].include?(item)}
        fail ArgumentError, 'invalid value for "allowed_updates", must include one of message, edited_message, channel_post, edited_channel_post, inline_query, chosen_inline_result, callback_query'
      end
      # resource path
      local_var_path = "/bot{token}/getUpdates".sub('{' + 'token' + '}', token.to_s)

      # query parameters
      query_params = {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'timeout'] = opts[:'timeout'] if !opts[:'timeout'].nil?
      query_params[:'allowed_updates'] = @api_client.build_collection_param(opts[:'allowed_updates'], :multi) if !opts[:'allowed_updates'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseUpdate')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UpdatesApi#get_updates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @return [WebhookInfo]
    def get_webhook_info(opts = {})
      data, _status_code, _headers = get_webhook_info_with_http_info(opts)
      return data
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(WebhookInfo, Fixnum, Hash)>] WebhookInfo data, response status code and response headers
    def get_webhook_info_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UpdatesApi.get_webhook_info ..."
      end
      # resource path
      local_var_path = "/bot{token}/getWebhookInfo"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WebhookInfo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UpdatesApi#get_webhook_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param token bot&#39;s token to authorize the request
    # @param url 
    # @param [Hash] opts the optional parameters
    # @option opts [File] :certificate 
    # @option opts [Integer] :max_connections 
    # @option opts [Array<String>] :allowed_updates 
    # @return [ResponseBool]
    def set_webhook(token, url, opts = {})
      data, _status_code, _headers = set_webhook_with_http_info(token, url, opts)
      return data
    end

    # 
    # 
    # @param token bot&#39;s token to authorize the request
    # @param url 
    # @param [Hash] opts the optional parameters
    # @option opts [File] :certificate 
    # @option opts [Integer] :max_connections 
    # @option opts [Array<String>] :allowed_updates 
    # @return [Array<(ResponseBool, Fixnum, Hash)>] ResponseBool data, response status code and response headers
    def set_webhook_with_http_info(token, url, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UpdatesApi.set_webhook ..."
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling UpdatesApi.set_webhook"
      end
      # verify the required parameter 'url' is set
      if @api_client.config.client_side_validation && url.nil?
        fail ArgumentError, "Missing the required parameter 'url' when calling UpdatesApi.set_webhook"
      end
      if @api_client.config.client_side_validation && opts[:'allowed_updates'] && !opts[:'allowed_updates'].all?{|item| ['message', 'edited_message', 'channel_post', 'edited_channel_post', 'inline_query', 'chosen_inline_result', 'callback_query'].include?(item)}
        fail ArgumentError, 'invalid value for "allowed_updates", must include one of message, edited_message, channel_post, edited_channel_post, inline_query, chosen_inline_result, callback_query'
      end
      # resource path
      local_var_path = "/bot{token}/setWebhook".sub('{' + 'token' + '}', token.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params["url"] = url
      form_params["certificate"] = opts[:'certificate'] if !opts[:'certificate'].nil?
      form_params["max_connections"] = opts[:'max_connections'] if !opts[:'max_connections'].nil?
      form_params["allowed_updates"] = @api_client.build_collection_param(opts[:'allowed_updates'], :multi) if !opts[:'allowed_updates'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseBool')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UpdatesApi#set_webhook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
