=begin
#Telegram bot API

#This is a swagger defenition for [Telegram bot API](https://core.telegram.org/bots/api). 

OpenAPI spec version: 3.3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'spec_helper'
require 'json'

# Unit tests for Teleswagger::MessagesApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'MessagesApi' do
  before do
    # run before each test
    @instance = Teleswagger::MessagesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of MessagesApi' do
    it 'should create an instance of MessagesApi' do
      expect(@instance).to be_instance_of(Teleswagger::MessagesApi)
    end
  end

  # unit tests for delete_message
  # 
  # 
  # @param token bot&#39;s token to authorize the request
  # @param chat_id 
  # @param message_id 
  # @param [Hash] opts the optional parameters
  # @return [ResponseBool]
  describe 'delete_message test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for edit_message_caption
  # 
  # 
  # @param token bot&#39;s token to authorize the request
  # @param [Hash] opts the optional parameters
  # @option opts [EditMessageCaptionBody] :body 
  # @return [InlineResponse2007]
  describe 'edit_message_caption test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for edit_message_reply_markup
  # 
  # 
  # @param token bot&#39;s token to authorize the request
  # @param [Hash] opts the optional parameters
  # @option opts [EditMessageReplyMarkupBody] :body 
  # @return [InlineResponse2007]
  describe 'edit_message_reply_markup test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for edit_message_text
  # 
  # 
  # @param token bot&#39;s token to authorize the request
  # @param [Hash] opts the optional parameters
  # @option opts [EditMessageTextBody] :body 
  # @return [InlineResponse2007]
  describe 'edit_message_text test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for forward_message
  # 
  # 
  # @param token bot&#39;s token to authorize the request
  # @param chat_id 
  # @param from_chat_id 
  # @param message_id 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :disable_notification 
  # @return [ResponseMessage]
  describe 'forward_message test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for send_message
  # 
  # 
  # @param token bot&#39;s token to authorize the request
  # @param [Hash] opts the optional parameters
  # @option opts [SendMessageBody] :body 
  # @return [ResponseMessage]
  describe 'send_message test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for send_message_bytes
  # 
  # 
  # @param token bot&#39;s token to authorize the request
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [ResponseMessage]
  describe 'send_message_bytes test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
