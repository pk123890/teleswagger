=begin
#Telegram bot API

#This is a swagger defenition for [Telegram bot API](https://core.telegram.org/bots/api). 

OpenAPI spec version: 3.3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'date'

module Teleswagger

  class PromoteChatMemberBody
    attr_accessor :chat_id

    attr_accessor :user_id

    attr_accessor :can_change_info

    attr_accessor :can_post_messages

    attr_accessor :can_edit_messages

    attr_accessor :can_delete_messages

    attr_accessor :can_invite_users

    attr_accessor :can_restrict_members

    attr_accessor :can_pin_messages

    attr_accessor :can_promote_members


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'chat_id' => :'chat_id',
        :'user_id' => :'user_id',
        :'can_change_info' => :'can_change_info',
        :'can_post_messages' => :'can_post_messages',
        :'can_edit_messages' => :'can_edit_messages',
        :'can_delete_messages' => :'can_delete_messages',
        :'can_invite_users' => :'can_invite_users',
        :'can_restrict_members' => :'can_restrict_members',
        :'can_pin_messages' => :'can_pin_messages',
        :'can_promote_members' => :'can_promote_members'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'chat_id' => :'Object',
        :'user_id' => :'Integer',
        :'can_change_info' => :'BOOLEAN',
        :'can_post_messages' => :'BOOLEAN',
        :'can_edit_messages' => :'BOOLEAN',
        :'can_delete_messages' => :'BOOLEAN',
        :'can_invite_users' => :'BOOLEAN',
        :'can_restrict_members' => :'BOOLEAN',
        :'can_pin_messages' => :'BOOLEAN',
        :'can_promote_members' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'chat_id')
        self.chat_id = attributes[:'chat_id']
      end

      if attributes.has_key?(:'user_id')
        self.user_id = attributes[:'user_id']
      end

      if attributes.has_key?(:'can_change_info')
        self.can_change_info = attributes[:'can_change_info']
      end

      if attributes.has_key?(:'can_post_messages')
        self.can_post_messages = attributes[:'can_post_messages']
      end

      if attributes.has_key?(:'can_edit_messages')
        self.can_edit_messages = attributes[:'can_edit_messages']
      end

      if attributes.has_key?(:'can_delete_messages')
        self.can_delete_messages = attributes[:'can_delete_messages']
      end

      if attributes.has_key?(:'can_invite_users')
        self.can_invite_users = attributes[:'can_invite_users']
      end

      if attributes.has_key?(:'can_restrict_members')
        self.can_restrict_members = attributes[:'can_restrict_members']
      end

      if attributes.has_key?(:'can_pin_messages')
        self.can_pin_messages = attributes[:'can_pin_messages']
      end

      if attributes.has_key?(:'can_promote_members')
        self.can_promote_members = attributes[:'can_promote_members']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @chat_id.nil?
        invalid_properties.push("invalid value for 'chat_id', chat_id cannot be nil.")
      end

      if @user_id.nil?
        invalid_properties.push("invalid value for 'user_id', user_id cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @chat_id.nil?
      return false if @user_id.nil?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          chat_id == o.chat_id &&
          user_id == o.user_id &&
          can_change_info == o.can_change_info &&
          can_post_messages == o.can_post_messages &&
          can_edit_messages == o.can_edit_messages &&
          can_delete_messages == o.can_delete_messages &&
          can_invite_users == o.can_invite_users &&
          can_restrict_members == o.can_restrict_members &&
          can_pin_messages == o.can_pin_messages &&
          can_promote_members == o.can_promote_members
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [chat_id, user_id, can_change_info, can_post_messages, can_edit_messages, can_delete_messages, can_invite_users, can_restrict_members, can_pin_messages, can_promote_members].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Teleswagger.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
